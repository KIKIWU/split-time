{"version":3,"file":"split_time.js","sources":["es/entry-list.js","es/task-queue.js","es/utils.js","es/timing/paint.js","es/observer.js","es/index.js"],"sourcesContent":["export default class EntryList extends Array {\n    constructor(entries) {\n        super(...entries);\n        this._entries = entries;\n    }\n    getEntries() {\n        return this._entries;\n    }\n    getEntriesByType(type) {\n        return this._entries.filter((e) => e.entryType === type);\n    }\n    getEntriesByName(name, type) {\n        return this._entries\n            .filter((e) => e.name === name)\n            .filter((e) => (type ? e.entryType === type : true));\n    }\n}\n//# sourceMappingURL=entry-list.js.map","import EntryList from './entry-list';\nconst INTERVAL = 100;\nclass TaskQueue {\n    constructor(registeredObservers, processedEntries) {\n        this.registeredObservers = registeredObservers || new Set();\n        this.processedEntries = processedEntries || new Set();\n        this.performanceEntries = new Set();\n        this.timerId = null;\n    }\n    add(observer) {\n        this.registeredObservers.add(observer);\n        if (this.registeredObservers.size === 1) {\n            this.observe();\n        }\n    }\n    remove(observer) {\n        this.registeredObservers.delete(observer);\n        if (!this.registeredObservers.size) {\n            this.disconnect();\n        }\n    }\n    disconnect() {\n        self.clearInterval(this.timerId);\n        this.timerId = null;\n    }\n    // call callbacks function when CPU idle\n    idleCallback() {\n    }\n    // Polling\n    observe() {\n        this.timerId = self.setInterval(this.processEntries.bind(this), INTERVAL);\n    }\n    processEntries() {\n        const entries = this.getNewEntries();\n        entries.forEach((entry) => {\n            const { entryType } = entry;\n            const observers = this.getObserversForType(this.registeredObservers, entryType);\n            // Add the entry to observer buffer\n            observers.forEach((observer) => {\n                observer.buffer.add(entry);\n            });\n            // Mark the entry as processed\n            this.processedEntries.add(entry);\n        });\n        // Queue task to process all observer buffers\n        const task = () => this.registeredObservers.forEach(this.processBuffer);\n        if ('requestAnimationFrame' in self) {\n            self.requestAnimationFrame(task);\n        }\n        else {\n            self.setTimeout(task, 0);\n        }\n    }\n    processBuffer(observer) {\n        // if use native observer, call callback function when native observers call\n        if (observer.useNative)\n            return;\n        const entries = Array.from(observer.buffer);\n        const entryList = new EntryList(entries);\n        observer.buffer.clear();\n        if (entries.length && observer.callback) {\n            observer.callback.call(undefined, entryList, observer);\n        }\n    }\n    getNewEntries() {\n        const entries = self.performance.getEntries();\n        const totalEntries = [...entries, ...this.performanceEntries];\n        return totalEntries.filter((entry) => !this.processedEntries.has(entry));\n    }\n    getObserversForType(observers, type) {\n        return Array.from(observers)\n            .filter((observer) => observer.unsupportedEntryTypes.some((t) => t === type));\n    }\n}\nexport default TaskQueue;\n//# sourceMappingURL=task-queue.js.map","export const ifSupported = 'PerformanceObserver' in self && typeof PerformanceObserver === 'function';\nexport const totalEntryTypes = [\n    'element',\n    'first-input',\n    'frame',\n    'largest-contentful-paint',\n    'layout-shift',\n    'longtask',\n    'mark',\n    'measure',\n    'navigation',\n    'paint',\n    'resource',\n    'server'\n];\n//# sourceMappingURL=utils.js.map","export const observe = () => {\n    const INTERVAL = 100;\n    let pollingTimerId = null;\n    return new Promise((resolve, reject) => {\n        pollingTimerId = self.setInterval(() => {\n            const { timing } = self.performance;\n            const { domContentLoadedEventStart, domContentLoadedEventEnd, navigationStart } = timing;\n            if (domContentLoadedEventStart && domContentLoadedEventEnd && navigationStart) {\n                self.clearInterval(pollingTimerId);\n                resolve([\n                    new PerformancePaintTiming('first-paint', domContentLoadedEventStart - navigationStart),\n                    new PerformancePaintTiming('first-contentful-paint', domContentLoadedEventEnd - navigationStart)\n                ]);\n            }\n        }, INTERVAL);\n    });\n};\nclass PerformancePaintTiming {\n    constructor(name, startTime) {\n        this.duration = 0;\n        this.entryType = 'paint';\n        this.name = name;\n        this.startTime = startTime;\n    }\n    toJSON() {\n        return JSON.stringify(this);\n    }\n}\nexport default PerformancePaintTiming;\n//# sourceMappingURL=paint.js.map","import TaskQueue from './task-queue';\nimport EntryList from './entry-list';\nimport { ifSupported } from './utils';\nimport { observe as PaintObserve } from './timing/paint';\nconst globalTaskQueue = new TaskQueue();\nclass SplitTime {\n    constructor(callback) {\n        this.entryTypes = [];\n        this.unsupportedEntryTypes = [];\n        this.callback = callback;\n        this.buffer = new Set();\n        this.taskQueue = globalTaskQueue;\n        this.useNative = false;\n    }\n    observe(options) {\n        // TODO: 参数校验\n        // TODO: 支持 entryTypes & type\n        // TODO: 支持 bufferd\n        const { entryTypes } = options;\n        let supportedOptionsEntryTypes = [];\n        this.entryTypes = entryTypes;\n        this.unsupportedEntryTypes = entryTypes;\n        if (ifSupported) {\n            const { supportedEntryTypes } = PerformanceObserver;\n            const supportedEntryTypesSet = new Set(supportedEntryTypes);\n            supportedOptionsEntryTypes = entryTypes.filter((entryType) => supportedEntryTypesSet.has(entryType));\n            this.unsupportedEntryTypes = entryTypes.filter((entryType) => !supportedEntryTypesSet.has(entryType));\n            if (supportedOptionsEntryTypes.length) {\n                this.useNative = true;\n                new PerformanceObserver((list, observer) => {\n                    this.processEntries(list);\n                })\n                    .observe({ entryTypes: supportedOptionsEntryTypes });\n            }\n        }\n        if (this.unsupportedEntryTypes.length) {\n            this.unsupportedEntryTypes.forEach((entryType) => {\n                switch (entryType) {\n                    case 'paint':\n                        PaintObserve()\n                            .then((entries) => {\n                            this.taskQueue.performanceEntries = new Set([...this.taskQueue.performanceEntries, ...entries]);\n                        });\n                        break;\n                }\n            });\n            this.taskQueue.add(this);\n        }\n    }\n    disconnect() {\n        this.taskQueue.remove(this);\n    }\n    takeRecords() {\n        const entries = Array.from(this.buffer);\n        return new EntryList(entries);\n    }\n    processEntries(list) {\n        this.useNative = true;\n        const entries = Array.from(this.buffer);\n        const nativeEntries = (list && list.getEntries()) || [];\n        // Combine entries from native & SplitTime\n        const entryList = new EntryList([...entries, ...nativeEntries]);\n        this.buffer.clear();\n        this.callback(entryList, this);\n        // if native callback isn't called for a long time & buffer is still not empty, call split-time process method\n        self.setTimeout(() => {\n            this.useNative = false;\n        }, 1000);\n    }\n}\nSplitTime.supportedEntryTypes = [];\nexport default SplitTime;\n//# sourceMappingURL=observer.js.map","import SplitTime from './observer';\nexport default SplitTime;\n//# sourceMappingURL=index.js.map"],"names":["PaintObserve"],"mappings":"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"}